print(maxent_evaluate_dir_this)
if (!dir.exists(maxent_evaluate_dir_this)){
dir.create(maxent_evaluate_dir_this)
}else{
print("dir exists")
}
mod <- maxent(x=pder_train, ## env conditions
p=pa_train,   ## 1:presence or 0:absence; occurence data + background points
path=paste0(maxent_evaluate_dir_this), ## folder for maxent output;
# if we do not specify a folder R will put the results in a temp file,
# and it gets messy to read those. . .
args=c("responsecurves","jackknife") ## parameter specification
)
actual_results <- list_pa_test[[i]]
predicted_results <- predict(mod,subset(list_x_test_full[[i]],select = -c(longitudes, latitudes)))
this_auc <- auc(actual_results, predicted_results)
this_bias <- bias(actual_results, predicted_results)
this_mae <- mae(actual_results, predicted_results)
# calculate TSS
# get threshold from training set and then use this threshold in testing set
this_p_train <- subset(list_p_train[[i]],select = -c(longitudes, latitudes))
this_a_train <- subset(list_a_train[[i]],select = -c(longitudes, latitudes))
this_evaluate_train <- dismo::evaluate(p = this_p_train, a = this_a_train, model = mod)
this_tss_original_list <-this_evaluate_train@TPR + this_evaluate_train@TNR - 1.0
this_threshold_index <- which(this_tss_original_list == max(this_tss_original_list))[[1]]
this_threshold <- this_evaluate_train@t[this_threshold_index]
this_p_test <- subset(list_p_test[[i]],select = -c(longitudes, latitudes))
this_a_test <- subset(list_a_test[[i]],select = -c(longitudes, latitudes))
this_evaluate_test <- dismo::evaluate(p = this_p_test, a = this_a_test, model = mod,tr=this_threshold)
this_test_tss <- max(this_evaluate_test@TPR + this_evaluate_test@TNR - 1.0)
print(this_evaluate_test@auc)
this_metric_list = list("mae"=this_mae,"tss"=this_test_tss,"bias"=this_bias,"auc"=this_auc,"tss_threshold"=this_threshold)
metric_result_list[[i]] <- this_metric_list
model_list[[i]] <- mod
}
if (metric_saving){
csv_saving_path <- paste(maxent_evaluate_dir,'/cv_metric_results.csv',sep = '')
write.csv(metric_result_list, file = csv_saving_path)
rds_saving_path <- paste(maxent_evaluate_dir,'/cv_metric_results.RDS',sep = '')
saveRDS(metric_result_list, file = rds_saving_path)
}
if (model_saving){
model_saving_path <- paste(maxent_evaluate_dir,'/cv_models.RDS',sep = '')
saveRDS(model_list, file = model_saving_path)
}
endTime <- Sys.time()
print(endTime-startTime)
return(list("metric_result_list"=metric_result_list,"model_list"=model_list))
}
run_maxent_model_training_basic <- function(maxent_evaluate_dir,final_x_train,final_x_test,final_pa_train,final_pa_test,final_p_train,final_a_train,final_p_test,final_a_test,maxent_model_dir,metric_saving=T,model_saving=T){
# run maxent model with given training set and calculate evaluation metric (with testing set)
# maxent_evaluate_dir: the directory to save results
# final_x_train,final_x_test,final_pa_train,final_pa_test,final_p_train,final_a_train,final_p_test,final_a_test,maxent_model_dir: : see prepare_input_data_kfold or prepare_input_data_kfold_buffer
# metric_saving=T: if true, save the evaluation metrices to .RDS and .csv files
# model_saving=T: if true, save the model to .RDS file
# return the trained model
cat("\nbasic training")
startTime <- Sys.time()
pder_train <- subset(final_x_train,select = -c(longitudes, latitudes))
pa_train <-final_pa_train
maxent_evaluate_dir_this <- paste(maxent_evaluate_dir,'/basic_final',sep = '')
print(maxent_evaluate_dir_this)
if (!dir.exists(maxent_evaluate_dir_this)){
dir.create(maxent_evaluate_dir_this)
}else{
print("dir exists")
}
mod <- maxent(x=pder_train, ## env conditions
p=pa_train,   ## 1:presence or 0:absence; occurence data + background points
path=paste0(maxent_evaluate_dir_this), ## folder for maxent output;
# if we do not specify a folder R will put the results in a temp file,
# and it gets messy to read those. . .
args=c("responsecurves","jackknife") ## parameter specification
)
actual_results <- final_pa_test
predicted_results <- predict(mod,subset(final_x_test,select = -c(longitudes, latitudes)))
this_auc <- auc(actual_results, predicted_results)
this_bias <- bias(actual_results, predicted_results)
this_mae <- mae(actual_results, predicted_results)
# calculate TSS
# get threshold from training set and then use this threshold in testing set
this_p_train <- subset(final_p_train,select = -c(longitudes, latitudes))
this_a_train <- subset(final_a_train,select = -c(longitudes, latitudes))
this_evaluate_train <- dismo::evaluate(p = this_p_train, a = this_a_train, model = mod)
this_tss_original_list <-this_evaluate_train@TPR + this_evaluate_train@TNR - 1.0
this_threshold_index <- which(this_tss_original_list == max(this_tss_original_list))[[1]]
this_threshold <- this_evaluate_train@t[this_threshold_index]
this_p_test <- subset(final_p_test,select = -c(longitudes, latitudes))
this_a_test <- subset(final_a_test,select = -c(longitudes, latitudes))
this_evaluate_test <- dismo::evaluate(p = this_p_test, a = this_a_test, model = mod,tr=this_threshold)
this_test_tss <- max(this_evaluate_test@TPR + this_evaluate_test@TNR - 1.0)
this_metric_list = list("mae"=this_mae,"tss"=this_test_tss,"bias"=this_bias,"auc"=this_auc,"tss_threshold"=this_threshold)
if (metric_saving){
csv_saving_path <- paste(maxent_evaluate_dir,'/basic_final_metric_results_training_basic.csv',sep = '')
write.csv(this_metric_list, file = csv_saving_path)
rds_saving_path <- paste(maxent_evaluate_dir,'/basic_final_metric_results_training_basic.RDS',sep = '')
saveRDS(this_metric_list, file = rds_saving_path)
}
if (model_saving){
# also save the model
maxent_model_path <- paste(maxent_model_dir,'/basic_final_model_training_basic.RDS',sep = '')
saveRDS(mod, file = maxent_model_path)
}
endTime <- Sys.time()
print(endTime-startTime)
return(mod)
}
run_maxent_model_training_all <- function(maxent_evaluate_dir,all_x_full,all_pa,maxent_result_path,dir_sub_name,maxent_model_dir,model_saving=T){
# run maxent model with all input data (hence no testing sets available for evaluation metric calculation)
# maxent_evaluate_dir: the directory to save results
# "all_pa"  list of 0 and 1, 0 indicates absence, 1 indicates presence, for all input points
# "all_x_full"  data frame with all the variable sampling for the all input points (presence + absence) and coordinates
# model_saving=T: if true, save the model to .RDS file
# return the trained model
cat("\nall-data training")
startTime <- Sys.time()
pder_train <- subset(all_x_full,select = -c(longitudes, latitudes))
pa_train <- all_pa
maxent_evaluate_dir_this <- paste(maxent_evaluate_dir,'/',dir_sub_name,sep = '')
print(maxent_evaluate_dir_this)
if (!dir.exists(maxent_evaluate_dir_this)){
dir.create(maxent_evaluate_dir_this)
}else{
print("dir exists")
}
mod <- maxent(x=pder_train, ## env conditions
p=pa_train,   ## 1:presence or 0:absence; occurence data + background points
path=paste0(maxent_evaluate_dir_this), ## folder for maxent output;
# if we do not specify a folder R will put the results in a temp file,
# and it gets messy to read those. . .
args=c("responsecurves","jackknife") ## parameter specification
)
if (model_saving){
# also save the model
maxent_model_path <- paste(maxent_model_dir,'/',dir_sub_name,'_final_model_training_all.RDS',sep = '')
saveRDS(mod, file = maxent_model_path)
}
endTime <- Sys.time()
print(endTime-startTime)
return(mod)
}
run_maxent_model_prediction_single <- function(mod,this_item_name,clim_dir,maxent_raster_dir_this){
startTime <- Sys.time()
print(this_item_name)
print(clim_dir)
clim_list <- list.files(clim_dir, pattern = '.tif$', full.names = T)  # '..' leads to the path above the folder where the .rmd file is located
clim <- raster::stack(clim_list)
print("make prediction")
ped <- predict(mod,clim)
save_raster_path <- paste(maxent_raster_dir_this,"/",this_item_name,"_",this_bug,'.tif',sep = '')
writeRaster(ped, filename =save_raster_path, format = "GTiff",overwrite=TRUE)
endTime <- Sys.time()
print(endTime-startTime)
}
run_maxent_model_prediction_basic_old <- function(mod,clim,maxent_raster_dir,dir_resample_mask,dir_sub_name){
# take one trained maxent model
# perform prediction on historical and future projected 2071-2100 ssp1, ssp2, ssp3, ssp5 rasters (after aligned)
# save the results as .tif files
cat("\nbasic prediction")
startTime <- Sys.time()
dir_resample_mask_ssp1 <- paste(dir_resample_mask,'/ssp126_2071_2100/',sep = '')
dir_resample_mask_ssp2 <- paste(dir_resample_mask,'/ssp245_2071_2100/',sep = '')
dir_resample_mask_ssp3 <- paste(dir_resample_mask,'/ssp370_2071_2100/',sep = '')
dir_resample_mask_ssp5 <- paste(dir_resample_mask,'/ssp585_2071_2100/',sep = '')
maxent_raster_dir_this <- paste(maxent_raster_dir,'/',dir_sub_name,sep = '')
print(maxent_raster_dir_this)
if (!dir.exists(maxent_raster_dir_this)){
dir.create(maxent_raster_dir_this)
}else{
print("dir exists")
}
########################################
# historical prediction                #
########################################
#
startTime <- Sys.time()
print("historical_clim")
ped <- predict(mod,clim)
# save raster
save_raster_path <- paste(maxent_raster_dir_this,"/historical_predict_",this_bug,'.tif',sep = '')
writeRaster(ped, filename =save_raster_path, format = "GTiff")
#plot(ped)
endTime <- Sys.time()
print(endTime-startTime)
########################################
# predictions for the future   SSP1    #
########################################
clim_list1 <- list.files(dir_resample_mask_ssp1, pattern = '.tif$', full.names = T)  # '..' leads to the path above the folder where the .rmd file is located
#check if the list of rasters are what we want
print("clim_list1")
clim1 <- raster::stack(clim_list1)
ped1 <- predict(mod,clim1)
save_raster_path1<- paste(maxent_raster_dir_this,"/ssp126_predict_",this_bug,'.tif',sep = '')
print(save_raster_path1)
writeRaster(ped1, filename =save_raster_path1, format = "GTiff")
########################################
# predictions for the future   SSP2    #
########################################
clim_list2 <- list.files(dir_resample_mask_ssp2, pattern = '.tif$', full.names = T)  # '..' leads to the path above the folder where the .rmd file is located
#check if the list of rasters are what we want
print("clim_list2")
clim2 <- raster::stack(clim_list2)
ped2 <- predict(mod,clim2)
save_raster_path2<- paste(maxent_raster_dir_this,"/ssp245_predict_",this_bug,'.tif',sep = '')
print(save_raster_path2)
writeRaster(ped2, filename =save_raster_path2, format = "GTiff")
########################################
# predictions for the future   SSP3    #
########################################
clim_list3 <- list.files(dir_resample_mask_ssp3, pattern = '.tif$', full.names = T)  # '..' leads to the path above the folder where the .rmd file is located
#check if the list of rasters are what we want
print("clim_list3")
clim3 <- raster::stack(clim_list3)
ped3 <- predict(mod,clim3)
save_raster_path3<- paste(maxent_raster_dir_this,"/ssp370_predict_",this_bug,'.tif',sep = '')
print(save_raster_path3)
writeRaster(ped3, filename =save_raster_path3, format = "GTiff")
########################################
# predictions for the future   SSP5    #
########################################
clim_list5 <- list.files(dir_resample_mask_ssp5, pattern = '.tif$', full.names = T)  # '..' leads to the path above the folder where the .rmd file is located
#check if the list of rasters are what we want
print("clim_list5")
clim5 <- raster::stack(clim_list5)
ped5 <- predict(mod,clim5)
save_raster_path5<- paste(maxent_raster_dir_this,"/ssp585_predict_",this_bug,'.tif',sep = '')
print(save_raster_path5)
writeRaster(ped5, filename =save_raster_path5, format = "GTiff")
endTime <- Sys.time()
print(endTime-startTime)
}
run_maxent_model_prediction_basic <- function(mod_path,clim_dir,maxent_raster_dir,dir_resample_mask,dir_sub_name){
# take one trained maxent model
# perform prediction on historical and future projected 2071-2100 ssp1, ssp2, ssp3, ssp5 rasters (after aligned)
# save the results as .tif files
cat("\nbasic prediction")
startTime <- Sys.time()
mod <- readRDS(mod_path)
dir_resample_mask_ssp1 <- paste(dir_resample_mask,'/ssp126_2071_2100/',sep = '')
dir_resample_mask_ssp2 <- paste(dir_resample_mask,'/ssp245_2071_2100/',sep = '')
dir_resample_mask_ssp3 <- paste(dir_resample_mask,'/ssp370_2071_2100/',sep = '')
dir_resample_mask_ssp5 <- paste(dir_resample_mask,'/ssp585_2071_2100/',sep = '')
maxent_raster_dir_this <- paste(maxent_raster_dir,'/',dir_sub_name,sep = '')
print(maxent_raster_dir_this)
if (!dir.exists(maxent_raster_dir_this)){
dir.create(maxent_raster_dir_this)
}else{
print("dir exists")
}
########################################
# historical prediction                #
########################################
run_maxent_model_prediction_single(mod=mod,
this_item_name=paste("historical_predict","_allinput",sep = ''),
clim_dir = clim_dir,
maxent_raster_dir_this=maxent_raster_dir_this)
########################################
# predictions for the future   SSP1    #
########################################
run_maxent_model_prediction_single(mod=mod,
this_item_name=paste("ssp126_predict","_allinput",sep = ''),
clim_dir = dir_resample_mask_ssp1,
maxent_raster_dir_this=maxent_raster_dir_this)
########################################
# predictions for the future   SSP2    #
########################################
run_maxent_model_prediction_single(mod=mod,
this_item_name=paste("ssp245_predict","_allinput",sep = ''),
clim_dir = dir_resample_mask_ssp2,
maxent_raster_dir_this=maxent_raster_dir_this)
########################################
# predictions for the future   SSP3    #
########################################
run_maxent_model_prediction_single(mod=mod,
this_item_name=paste("ssp370_predict","_allinput",sep = ''),
clim_dir = dir_resample_mask_ssp3,
maxent_raster_dir_this=maxent_raster_dir_this)
########################################
# predictions for the future   SSP5    #
########################################
run_maxent_model_prediction_single(mod=mod,
this_item_name=paste("ssp585_predict","_allinput",sep = ''),
clim_dir = dir_resample_mask_ssp5,
maxent_raster_dir_this=maxent_raster_dir_this)
endTime <- Sys.time()
print(endTime-startTime)
}
run_maxent_model_prediction_list_old <- function(mod_list,clim,maxent_raster_dir,dir_resample_mask,dir_sub_name,number_replicate){
# take a list of trained maxent models
# perform prediction on historical and future projected 2071-2100 ssp1, ssp2, ssp3, ssp5 rasters (after aligned)
# save the results as .tif files
# mod_list: list of trained maxent models
# clim: historical bioclimatic rasters (aligned)
# maxent_raster_dir: the directory under which the bioclimatic rasters (aligned) are stored, with rasters for ssp1 - ssp5 stored under corresponding subfolders.
cat("\nmodel-list prediction")
startTime <- Sys.time()
dir_resample_mask_ssp1 <- paste(dir_resample_mask,'/ssp126_2071_2100/',sep = '')
dir_resample_mask_ssp2 <- paste(dir_resample_mask,'/ssp245_2071_2100/',sep = '')
dir_resample_mask_ssp3 <- paste(dir_resample_mask,'/ssp370_2071_2100/',sep = '')
dir_resample_mask_ssp5 <- paste(dir_resample_mask,'/ssp585_2071_2100/',sep = '')
maxent_raster_dir_this <- paste(maxent_raster_dir,'/',dir_sub_name,sep = '')
print(maxent_raster_dir_this)
if (!dir.exists(maxent_raster_dir_this)){
dir.create(maxent_raster_dir_this)
}else{
print("dir exists")
}
for (i in 1:number_replicate){
cat("\n",i)
mod <- mod_list[[i]]
########################################
# historical prediction                #
########################################
#
startTime <- Sys.time()
print("historical_clim")
ped <- predict(mod,clim)
# save raster
save_raster_path <- paste(maxent_raster_dir_this,"/historical_predict_",this_bug,'_',i,'.tif',sep = '')
writeRaster(ped, filename =save_raster_path, format = "GTiff")
#plot(ped)
endTime <- Sys.time()
print(endTime-startTime)
########################################
# predictions for the future   SSP1    #
########################################
clim_list1 <- list.files(dir_resample_mask_ssp1, pattern = '.tif$', full.names = T)  # '..' leads to the path above the folder where the .rmd file is located
#check if the list of rasters are what we want
print("clim_list1")
clim1 <- raster::stack(clim_list1)
ped1 <- predict(mod,clim1)
save_raster_path1<- paste(maxent_raster_dir_this,"/ssp126_predict_",this_bug,'_',i,'.tif',sep = '')
print(save_raster_path1)
writeRaster(ped1, filename =save_raster_path1, format = "GTiff")
########################################
# predictions for the future   SSP2    #
########################################
clim_list2 <- list.files(dir_resample_mask_ssp2, pattern = '.tif$', full.names = T)  # '..' leads to the path above the folder where the .rmd file is located
#check if the list of rasters are what we want
print("clim_list2")
clim2 <- raster::stack(clim_list2)
ped2 <- predict(mod,clim2)
save_raster_path2<- paste(maxent_raster_dir_this,"/ssp245_predict_",this_bug,'_',i,'.tif',sep = '')
print(save_raster_path2)
writeRaster(ped2, filename =save_raster_path2, format = "GTiff")
########################################
# predictions for the future   SSP3    #
########################################
clim_list3 <- list.files(dir_resample_mask_ssp3, pattern = '.tif$', full.names = T)
#check if the list of rasters are what we want
print("clim_list3")
clim3 <- raster::stack(clim_list3)
ped3 <- predict(mod,clim3)
save_raster_path3<- paste(maxent_raster_dir_this,"/ssp370_predict_",this_bug,'_',i,'.tif',sep = '')
print(save_raster_path3)
writeRaster(ped3, filename =save_raster_path3, format = "GTiff")
########################################
# predictions for the future   SSP5    #
########################################
clim_list5 <- list.files(dir_resample_mask_ssp5, pattern = '.tif$', full.names = T)
#check if the list of rasters are what we want
print("clim_list5")
clim5 <- raster::stack(clim_list5)
ped5 <- predict(mod,clim5)
save_raster_path5<- paste(maxent_raster_dir_this,"/ssp585_predict_",this_bug,'_',i,'.tif',sep = '')
print(save_raster_path5)
writeRaster(ped5, filename =save_raster_path5, format = "GTiff")
}
endTime <- Sys.time()
print(endTime-startTime)
}
run_maxent_model_prediction_list <- function(mod_list_path,clim_dir,maxent_raster_dir,dir_resample_mask,dir_sub_name,number_replicate){
# take a list of trained maxent models
# perform prediction on historical and future projected 2071-2100 ssp1, ssp2, ssp3, ssp5 rasters (after aligned)
# save the results as .tif files
# mod_list: list of trained maxent models
# clim: historical bioclimatic rasters (aligned)
# maxent_raster_dir: the directory under which the bioclimatic rasters (aligned) are stored, with rasters for ssp1 - ssp5 stored under corresponding subfolders.
cat("\nmodel-list prediction")
startTime <- Sys.time()
mod_list <- readRDS(mod_list_path)
dir_resample_mask_ssp1 <- paste(dir_resample_mask,'/ssp126_2071_2100/',sep = '')
dir_resample_mask_ssp2 <- paste(dir_resample_mask,'/ssp245_2071_2100/',sep = '')
dir_resample_mask_ssp3 <- paste(dir_resample_mask,'/ssp370_2071_2100/',sep = '')
dir_resample_mask_ssp5 <- paste(dir_resample_mask,'/ssp585_2071_2100/',sep = '')
maxent_raster_dir_this <- paste(maxent_raster_dir,'/',dir_sub_name,sep = '')
print(maxent_raster_dir_this)
if (!dir.exists(maxent_raster_dir_this)){
dir.create(maxent_raster_dir_this)
}else{
print("dir exists")
}
for (i in 1:number_replicate){
cat("\n",i)
mod <- mod_list[[i]]
########################################
# historical prediction                #
########################################
run_maxent_model_prediction_single(mod=mod,
this_item_name=paste("historical_predict_",i,sep = ''),
clim_dir = clim_dir,
maxent_raster_dir_this=maxent_raster_dir_this)
########################################
# predictions for the future   SSP1    #
########################################
run_maxent_model_prediction_single(mod=mod,
this_item_name=paste("ssp126_predict_",i,sep = ''),
clim_dir = dir_resample_mask_ssp1,
maxent_raster_dir_this=maxent_raster_dir_this)
########################################
# predictions for the future   SSP2    #
########################################
run_maxent_model_prediction_single(mod=mod,
this_item_name=paste("ssp245_predict_",i,sep = ''),
clim_dir = dir_resample_mask_ssp2,
maxent_raster_dir_this=maxent_raster_dir_this)
########################################
# predictions for the future   SSP3    #
########################################
run_maxent_model_prediction_single(mod=mod,
this_item_name=paste("ssp370_predict_",i,sep = ''),
clim_dir = dir_resample_mask_ssp3,
maxent_raster_dir_this=maxent_raster_dir_this)
########################################
# predictions for the future   SSP5    #
########################################
run_maxent_model_prediction_single(mod=mod,
this_item_name=paste("ssp585_predict_",i,sep = ''),
clim_dir = dir_resample_mask_ssp5,
maxent_raster_dir_this=maxent_raster_dir_this)
}
endTime <- Sys.time()
print(endTime-startTime)
}
########################################
# The Actual Run.                      #
########################################
bug_list <- list("San","Ger","Rec","Dim","Ind","Lec","Lon","Maz","Mex","Neo","Pro","Rub")
number_replicate <- 10
top_file_dir <- "/Users/liting/Documents/GitHub/r_chagasM/output/pixel_buffer_off"
input_file_dir <-"/Users/liting/Documents/GitHub/r_chagasM"
clim_dir <- "/Users/liting/Documents/data/resample_mask/historical/"
shapefile_path <-paste(input_file_dir,"/masked_raster/shapefile.shp",sep = '')
for (this_bug in bug_list){
########################################
# all the saving paths                 #
########################################
#read the occurence
occ_raw_path <- paste(input_file_dir,"/data/",this_bug,'.csv',sep = '')
#/output folder saves all the output
all_path_stack <- all_saving_paths(top_file_dir=top_file_dir,this_bug=this_bug)
########################################
#       prepare the data.              #
########################################
# shapefile path for the vector having the shape of the reprojected and aligned input raster
this_input_data_stack <- prepare_input_data_kfold_buffer(occ_raw_path=occ_raw_path,
clim_dir=clim_dir,
number_of_folds=number_replicate,
shapefile_path=shapefile_path,
maxent_result_dir=all_path_stack$maxent_result_dir,
buff_width = 55555)
########################################
# run MaxEnt                           #
########################################
# perform cross-validation
cv_result_list <- run_maxent_model_cv(list_x_train_full=this_input_data_stack$list_x_train_full,
list_x_test_full=this_input_data_stack$list_x_test_full,
list_pa_train=this_input_data_stack$list_pa_train,
list_pa_test=this_input_data_stack$list_pa_test,
list_p_train=this_input_data_stack$list_p_train,
list_a_train=this_input_data_stack$list_a_train,
list_p_test=this_input_data_stack$list_p_test,
list_a_test=this_input_data_stack$list_a_test,
maxent_evaluate_dir=all_path_stack$maxent_evaluate_dir,
number_replicate=number_replicate,
maxent_model_dir=all_path_stack$maxent_model_dir,
metric_saving=T,
model_saving=T)
# train the model (for prediction)
this_model <- run_maxent_model_training_all(maxent_evaluate_dir=all_path_stack$maxent_evaluate_dir,
all_x_full= this_input_data_stack$all_x_full,
all_pa= this_input_data_stack$all_pa,
maxent_result_path=all_path_stack$maxent_result_path,
dir_sub_name="all_input",
maxent_model_dir=all_path_stack$maxent_model_dir,
model_saving=T)
########################################
# predictions              #
# # ########################################
#
# dir_resample_mask <- "/Users/liting/Documents/data/resample_mask"
#
# cv_result_list_path <- paste(all_path_stack$maxent_evaluate_dir,'/cv_models.RDS',sep = '')
# this_model_path <- paste(all_path_stack$maxent_model_dir,'/',dir_sub_name,'_final_model_training_all.RDS',sep = '')
# # perform predictions on all the cv models
# rm(this_input_data_stack)
#
# # run_maxent_model_prediction_list(mod_list_path=cv_result_list_path,#cv_result_list$model_list,
# #                                  clim=clim_dir,
# #                                  maxent_raster_dir=all_path_stack$maxent_raster_dir,
# #                                  dir_resample_mask=dir_resample_mask,
# #                                  dir_sub_name='cross_validation',
# #                                  number_replicate=number_replicate)
#
# # perform predictions on the model trained with all input data
# run_maxent_model_prediction_basic(mod_path=this_model_path,
#                                   clim=clim_dir,
#                                   maxent_raster_dir=all_path_stack$maxent_raster_dir,
#                                   dir_resample_mask=dir_resample_mask,
#                                   dir_sub_name=dir_sub_name)
#
}
